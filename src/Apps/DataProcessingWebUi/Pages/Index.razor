@page "/"
@using Utils = CoreUtils.Classes.Utils
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using System.Web
@using System
@using System.Dynamic
@using System.Globalization
@using System.Net.Http.Headers
@using System.Threading
@using CoreUtils.Classes
@using Microsoft.VisualBasic.CompilerServices
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids


<h1>File And Data Processing App</h1>

<p class="lead">This App automates File and Data Processing for Alegeus and COBRA Source Files.</p>
<p class="lead">It also fetches Result &amp; Error Files from Alegeus and allows easy tracking </p>

<div class="">
    <div class="">
        <p>
            &nbsp;<button id="cmdCopyTestFiles" @onclick="cmdCopyTestFiles">CopyTestFiles</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Copy test files BEFORE starting a new process
        </p>
    </div>
    <div class="">
        <p>

        </p>
    </div>
    <div class="">
        <p>
            &nbsp;
            <button id="cmdProcessCobraFiles" @onclick="cmdProcessCobraFiles">ProcessCobraFiles</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Process COBRA Source Files
        </p>
    </div>
    <div class="">
        <p>

            &nbsp;
            <button id="cmdProcessAlegeusFiles" @onclick="cmdProcessAlegeusFiles">ProcessAlegeusFiles</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Process Alegeus Source Files
        </p>
    </div>
    <div class="">
        <p>

            &nbsp;
            <button id="cmdRetrieveFtpErrorLogs" @onclick="cmdRetrieveFtpErrorLogs">RetrieveFtpErrorLogs</button>
            &nbsp;&nbsp;&nbsp;&nbsp;Get Alegeus Upload Results

        </p>
    </div>
    <div class="">
        <p>

            &nbsp;
            <button id="cmdOpenAccessDB" @onclick="cmdOpenAccessDB">Open Access UI</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Open MS Access User Interface
        </p>
    </div>
    <div class="">
        <p>

            &nbsp;
            <button id="cmdDoALL" @onclick="cmdDoALL">Do All Above</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Do All Above in Sequence
        </p>
    </div>
    <p>
        Logs
    </p>
</div>
<div class="">
    <SfGrid @ref="Grid" DataSource="@Logs" Height="400px" />
</div>

@code {
    private string _username = "dataprocessinguser";
    @*Utils.GetAppSetting("BasicAuthUserName");*@
    private string _password = "#gjgB0AXG^940";
    @*Utils.GetAppSetting("BasicAuthPassword");*@

    SfGrid<LogFields> Grid { get; set; }

    private List<LogFields> Logs = new List<LogFields> { };

    private void addAuthHeader(HttpClient client)
    {
        string creds = $"{_username}:{_password}";
        AuthenticationHeaderValue authHeaderValue = new AuthenticationHeaderValue("basic", creds);
        client.DefaultRequestHeaders.Authorization = authHeaderValue;
    }


    public object SendRequest(string path, string arg)
    {

        @*string strUrl = "https://localhost:44320";*@
        string strUrl = "http://be015:81";

        HttpClient client = new HttpClient { BaseAddress = new Uri($"{strUrl}"), Timeout = TimeSpan.FromSeconds(600) };

        // add auth header
        this.addAuthHeader(client);

        //HTTP GET Async
        var result = client.GetAsync($"/DataProcessing/{path}/{arg}").Result;

        if (!result.IsSuccessStatusCode)
        {
            //log response status here..
            throw new Exception($"{result.ReasonPhrase} {result.RequestMessage}");
        }

        // parse job ID
        var content = result.Content.ReadAsStringAsync().Result;

        //
        if (path.ToLower() != "JobResults".ToLower())
        {

            var converter = new ExpandoObjectConverter();
            dynamic taskJobDetails = JsonConvert.DeserializeObject<ExpandoObject>(content, converter);

            string jobId = (string)taskJobDetails.JobId;

            // get jobResult
            Boolean jobIsProcessing = true;

            // loop till job is processing - write to log : processing

            while (jobIsProcessing)
            {
                // get result of the job started by the request
                dynamic jobDetailsRequestResult = this.SendRequest("JobResults", $"{jobId}");
                var jobDetailsContent = jobDetailsRequestResult.Content.ReadAsStringAsync().Result;
                //
                dynamic jobDetails = JsonConvert.DeserializeObject<ExpandoObject>(jobDetailsContent, converter);
                //
                string jobState = jobDetails != null ? jobDetails.JobState : "error";

                // check job state

                switch (jobState.ToLower())
                {
                    case @"processing":
                    case @"started":
                    case @"enqueued":
                        var logItem = new LogFields(
                                DateTime.Now.ToString(CultureInfo.InvariantCulture),
                                "",
                                arg,
                                jobState,
                                "",
                                jobState
                            );

                        this.Log(logItem);
                        //
                        Thread.Sleep(500);
                        break;

                    default:
                        jobIsProcessing = false;

                        var logItem2 = new LogFields(
                                DateTime.Now.ToString(CultureInfo.InvariantCulture),
                                "",
                                arg,
                                jobState,
                                "",
                                Utils.IsBlank(jobDetails?.JobErrorDetails) ? jobDetails?.JobResultDetails : jobDetails?.JobErrorDetails
                            );

                        this.Log(logItem2);
                        result = jobDetailsRequestResult;
                        break;
                }

            }

        }
        return result;
    }

    void cmdCopyTestFiles()
    {
        this.Clear();

        this.Grid.Refresh();
        //
        dynamic result = this.SendRequest("StartJob", "copytestfiles");

    }

    void cmdProcessCobraFiles()
    {
        this.Clear();

        //
        dynamic result = this.SendRequest("StartJob", "processcobrafiles");
    }

    void cmdProcessAlegeusFiles()
    {
        this.Clear();

        //
        dynamic result = this.SendRequest("StartJob", "processalegeusfiles");
    }

    void cmdRetrieveFtpErrorLogs()
    {
        this.Clear();
        //
        dynamic result = this.SendRequest("StartJob", "retrieveftperrorlogs");
    }

    void cmdOpenAccessDB()
    {
        this.Clear();

    }

    void cmdDoALL()
    {
        this.Clear();


        //
    }

    void Clear()
    {
        this.Logs.Clear();
        this.Grid.Refresh();
    }
    void Log(LogFields logItem)
    {
        this.Logs.Add(logItem);
        this.Grid.Refresh();
        this.Grid.SelectedRowIndex = this.Logs.Count;
    }


}