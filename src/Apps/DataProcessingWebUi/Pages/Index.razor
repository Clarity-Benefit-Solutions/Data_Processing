@page "/"
@using Utils = CoreUtils.Classes.Utils
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using System.Web
@using System
@using System.Dynamic
@using System.Globalization
@using System.Net.Http.Headers
@using System.Threading
@using CoreUtils.Classes
@using Microsoft.VisualBasic.CompilerServices

<h1>File And Data Processing App</h1>

<p class="lead">This App automates File and Data Processing for Alegeus and COBRA Source Files.</p>
<p class="lead">It also fetches Result &amp; Error Files from Alegeus and allows easy tracking </p>

<div class="">
    <div class="">
        <p>
            &nbsp;<button id="cmdCopyTestFiles" @onclick="cmdCopyTestFiles">CopyTestFiles</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Copy test files BEFORE starting a new process
        </p>
    </div>
    <div class="">
        <p>

        </p>
    </div>
    <div class="">
        <p>
            &nbsp;
            <button id="cmdProcessCobraFiles" @onclick="cmdProcessCobraFiles">ProcessCobraFiles</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Process COBRA Source Files
        </p>
    </div>
    <div class="">
        <p>

            &nbsp;
            <button id="cmdProcessAlegeusFiles" @onclick="cmdProcessAlegeusFiles">ProcessAlegeusFiles</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Process Alegeus Source Files
        </p>
    </div>
    <div class="">
        <p>

            &nbsp;
            <button id="cmdRetrieveFtpErrorLogs" @onclick="cmdRetrieveFtpErrorLogs">RetrieveFtpErrorLogs</button>
            &nbsp;&nbsp;&nbsp;&nbsp;Get Alegeus Upload Results

        </p>
    </div>
    <div class="">
        <p>

            &nbsp;
            <button id="cmdOpenAccessDB" @onclick="cmdOpenAccessDB">Open Access UI</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Open MS Access User Interface
        </p>
    </div>
    <div class="">
        <p>

            &nbsp;
            <button id="cmdShowJobs" @onclick="cmdShowJobStatus">Show Job Status</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Show Job Status
        </p>
    </div>
    <p>
        Logs
    </p>
</div>
<div class="">
    <p>

        &nbsp;
        <button id="cmdClear" @onclick="Clear">Clear Logs</button>
        &nbsp;&nbsp;&nbsp;&nbsp; Show Job Status
    </p>
    <RadzenDataGrid @ref="Grid" Data="@Logs" TItem="LogFields" AllowColumnResize="true" Style="height:200px;max-height:400px" >
        <Columns>
            <RadzenDataGridColumn TItem="LogFields" Property="LogTime" Title="LogTime" Width="150px" />
            <RadzenDataGridColumn TItem="LogFields" Property="Task" Title="Task" Width="150px" />
            <RadzenDataGridColumn TItem="LogFields" Property="Status" Title="Status" Width="150px" />
        </Columns>
    </RadzenDataGrid>

</div>
<div class="">
    <p>


    </p>
</div>
<div class="">
    <p>


    </p>
</div>
<div class="">
    <p>
        <textarea @bind="ResultTextAreaValue"
                  @bind:event="oninput"
                  Id="ResultTextArea"
                  Name="ResultTextArea"
                  AutoSize="true"
                  style="width: 100%; max-width: 100%; height: 400px;max-height: 600px">
        </textarea>
    </p>
</div>
<div class="">
    <p>


    </p>
</div>

@code {
    @inject IJSRuntime jsRuntime

    private string _username = "dataprocessinguser";
    @*Utils.GetAppSetting("BasicAuthUserName");*@
    private string _password = "#gjgB0AXG^940";
    @*Utils.GetAppSetting("BasicAuthPassword");*@

    RadzenDataGrid<LogFields> Grid { get; set; }
    public string ResultTextAreaValue { get; set; } = String.Empty;

    private Boolean needsRefresh = false;

    private string strBaseUrl = "http://be015:81";


    private List<LogFields> Logs = new List<LogFields> { };

    private void addAuthHeader(HttpClient client)
    {
        string creds = $"{_username}:{_password}";
        AuthenticationHeaderValue authHeaderValue = new AuthenticationHeaderValue("basic", creds);
        client.DefaultRequestHeaders.Authorization = authHeaderValue;
    }

    private void LogJobResult(string jobId)
    {

        // get result of the job started by the request
        dynamic jobDetailsRequestResult = this.SendRequest("JobResults", $"{jobId}");
        //
        var jobDetailsContent = jobDetailsRequestResult.Content.ReadAsStringAsync().Result;
        //
        JobDetails jobDetails = JsonConvert.DeserializeObject<JobDetails>(jobDetailsContent);
        //
        string jobState = jobDetails != null ? jobDetails.JobState : "error";

        // check job state
        switch (jobState.ToLower())
        {
            case @"processing":
            case @"started":
            case @"enqueued":
                var logItem = new LogFields(
                    DateTime.Now.ToString(CultureInfo.InvariantCulture),
                    "",
                    jobDetails?.JobName,
                    jobState,
                    "",
                    ""
                    );

                this.Log(logItem);

                // schedule new check in N ms
                var timer = new System.Threading.Timer((_) =>
                {
                    InvokeAsync(async () =>
                    {
                        LogJobResult(jobId);
                    });
                }, null, 1000, 0);

                return;

            default:
                OperationResult jobDetailsOutcome = (OperationResult)Utils.DeserializeJson<OperationResult>(jobDetails?.JobResultDetails);

                if (jobDetailsOutcome.Code != "200")
                {
                    jobState = "ERROR";
                }

                var logItem2 = new LogFields(
                    DateTime.Now.ToString(CultureInfo.InvariantCulture),
                    "",
                    jobDetails?.JobName,
                    jobState,
                    "",
                    jobDetailsOutcome.ToString()
                    );

                this.Log(logItem2);
                //
                return;
        }


    }

    public object SendRequest(string path, string arg)
    {
        try
        {

            StateHasChanged();

            HttpClient client = new HttpClient { BaseAddress = new Uri($"{strBaseUrl}"), Timeout = TimeSpan.FromSeconds(600) };

            // add auth header
            this.addAuthHeader(client);

            //HTTP GET Async
            var result = client.GetAsync($"/DataProcessing/{path}/{arg}").Result;

            if (!result.IsSuccessStatusCode)
            {
                //log response status here..
                throw new Exception($"{result.ReasonPhrase} {result.RequestMessage}");
            }

            // parse job ID
            var content = result.Content.ReadAsStringAsync().Result;

            //
            if (path.ToLower() != "JobResults".ToLower())
            {
                JobDetails taskJobDetails = JsonConvert.DeserializeObject<JobDetails>(content);

                string jobId = (string)taskJobDetails?.JobId;
                //
                LogJobResult(jobId);

            }
            return result;
        }
        catch (Exception ex)
        {
            var logItem2 = new LogFields(
                DateTime.Now.ToString(CultureInfo.InvariantCulture),
                "",
                arg,
                "ERROR",
                "",
                new OperationResult("0", "200", "ERROPR", "", ex.ToString()).ToString()
                );

            this.Log(logItem2);
            return null;
        }
    }

    void cmdCopyTestFiles()
    {
        dynamic result = this.SendRequest("StartJob", "copytestfiles");
    }

    void cmdProcessCobraFiles()
    {
        dynamic result = this.SendRequest("StartJob", "processcobrafiles");
    }

    void cmdProcessAlegeusFiles()
    {
        dynamic result = this.SendRequest("StartJob", "processalegeusfiles");
    }

    void cmdRetrieveFtpErrorLogs()
    {
        dynamic result = this.SendRequest("StartJob", "retrieveftperrorlogs");
    }

    void cmdOpenAccessDB()
    {
        this.Clear();

    }

    void cmdShowJobStatus()
    {
        jsRuntime.InvokeAsync<object>("open", $"{strBaseUrl}/hangfire/jobs/processing", "_blank");
    }

    void Clear()
    {
        this.Logs.Clear();
        this.ResultTextAreaValue = "";
        this.Grid.Reload();
        //
        this.needsRefresh = true;
        //
        StateHasChanged();
        //
        this.needsRefresh = false;
    }

    void Log(LogFields logItem)
    {

        if (!Utils.IsBlank(logItem.OutcomeDetails))
        {
            OperationResult details = (OperationResult)Utils.DeserializeJson<OperationResult>(logItem.OutcomeDetails);
            if (!Utils.IsBlank(details.Error))
            {
                this.ResultTextAreaValue = details.Error + "\n\n\n\n------------------------------------\n\n\n\n" + details.Details;
            }
            else
            {
                this.ResultTextAreaValue = details.Details;
            }
        }

        //
        logItem.OutcomeDetails = logItem.Status;
        this.Logs.Add(logItem);
        this.Grid.Reload();

        this.needsRefresh = true;
        StateHasChanged();

    }

}