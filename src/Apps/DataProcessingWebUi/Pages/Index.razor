@*For live reload, please see https://weblog.west-wind.com/posts/2019/Jun/03/Building-Live-Reload-Middleware-for-ASPNET-Core
    1) Go to root folder and type dotnet watch run
    2) for debugging, attach to exe in VS
*@
@page "/"
@using CoreUtils.Classes
@using System
@using System.Globalization
@using System.Net.Http.Headers
@using Newtonsoft.Json

<h1>File And Data Processing App</h1>

<p class="lead">This App automates File and Data Processing for Alegeus and COBRA Source Files.</p>
<p class="lead">It also fetches Result &amp; Error Files from Alegeus and allows easy tracking </p>
<div>
    <p></p>
    <a href="/help" target="_blank">Help</a>
    <p></p>
</div>
<div>
    <p></p>

    <label>Use Testing Subfolder Root - leave blank for the default path    </label>
    <input @bind="ftpSubFolderPath" />
    <br />
    <label>
        Please place your Input Files under Path
        <br />
        <b>@rootFtpPath</b>
    </label>
    <p></p>
</div>
<div>
  @*  <div>
        <p>
            &nbsp;<button id="cmdCopyTestFiles" disabled=@IsTaskRunning @onclick="cmdCopyTestFiles">CopyTestFiles</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Copy test files BEFORE starting a new process
        </p>
    </div>
    <div>
        <p>

        </p>
    </div>
   *@ 
   <div>
        <p>
            &nbsp;
            <button id="cmdProcessIncomingFiles" disabled=@IsTaskRunning @onclick="cmdProcessIncomingFiles">ProcessIncomingFiles</button>
            &nbsp;&nbsp;&nbsp;&nbsp; ProcessIncomingFiles
        </p>
    </div>
  @*  <div>
        <p>

            &nbsp;
            <button id="cmdRetrieveFtpErrorLogs" disabled=@IsTaskRunning @onclick="cmdRetrieveFtpErrorLogs">RetrieveFtpErrorLogs</button>
            &nbsp;&nbsp;&nbsp;&nbsp;Get Alegeus Upload Results

        </p>
    </div>
    *@
      <div>
        <p>
            &nbsp;
            Upload File For Checking: &nbsp;&nbsp;&nbsp;&nbsp; <InputFile OnChange="@UploadFiles" single />
        </p>
    </div>
    <div>
        <p>

            &nbsp;
            <button id="cmdShowJobs" disabled=@IsTaskRunning @onclick="cmdShowJobStatus">Show Job Status</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Show Job Status
        </p>
    </div>
   @*  <div>
        <p>

            &nbsp;
            <button id="cmdProcessParticipantEnrollmentfiles" disabled=@IsTaskRunning @onclick="cmdProcessParticipantEnrollmentfiles">Process Participant Enrollment Files</button>
            &nbsp;&nbsp;&nbsp;&nbsp; Process Participant Enrollment Files
        </p>
    </div>*@
 
    <p>
        Logs
    </p>
</div>
<div>
    <p>

        &nbsp;
        <button id="cmdClear" disabled=@IsTaskRunning @onclick="Clear">Clear Logs</button>
        &nbsp;&nbsp;&nbsp;&nbsp; Show Job Status
    </p>
    <RadzenDataGrid @ref="Grid" Data="@Logs" TItem="LogFields" AllowColumnResize="true" Style="height: 200px; max-height: 300px; overflow-x:hidden;
    overflow-y:visible;">
        <Columns>
            <RadzenDataGridColumn TItem="LogFields" Property="LogTime" Title="LogTime" Width="150px" />
            <RadzenDataGridColumn TItem="LogFields" Property="Task" Title="Task" Width="150px" />
            <RadzenDataGridColumn TItem="LogFields" Property="Status" Title="Status" Width="150px" />
        </Columns>
    </RadzenDataGrid>
</div>
<div>
    <p>


    </p>
</div>
<div>
    <p>


    </p>
</div>
<div>
    <p>
        <textarea @bind="ResultTextAreaValue"
                  @bind:event="oninput"
                  Id="ResultTextArea"
                  Name="ResultTextArea"
                  AutoSize="true"
                  style="height: 400px; max-height: 600px; max-width: 100%; width: 100%;">
        </textarea>
    </p>
</div>
<div>
    <p>


    </p>
</div>

@code {

    @inject IJSRuntime jsRuntime
    @inject NavigationManager navManager



    private readonly string _username = "dataprocessinguser";
    @*Utils.GetAppSetting("BasicAuthUserName");*@
    private readonly string _password = "#gjgB0AXG^940";
    @*Utils.GetAppSetting("BasicAuthPassword");*@


    RadzenDataGrid<LogFields> Grid { get; set; }
    public string ResultTextAreaValue { get; set; } = String.Empty;

    private string getLocalFtpRoot()
    {
        try
        {
            string path = "LocalFtpRoot";
            HttpClient client = new HttpClient { BaseAddress = new Uri($"{ProcessingServerBaseUrl}"), Timeout = TimeSpan.FromSeconds(600) };
            // add auth header
            addAuthHeader(client);

            string strUrl = $"/DataProcessing/{path}/{ftpSubFolderPath}";
            var result = client.PostAsync(strUrl, null).Result;
            var content = result.Content.ReadAsStringAsync().Result;
            return content;
        }
        catch (Exception ex)
        {
            return "";
        }
    }

    private string rootFtpPath
    {
        get
        {
            return $"{getLocalFtpRoot()}";
        }
    }

    private string _ftpSubFolderPath = "";
    private string ftpSubFolderPath
    {
        get
        {
            return _ftpSubFolderPath;
        }
        set
        {
            if (value == null)
            {
                _ftpSubFolderPath = "";
            }
            else
            {
                _ftpSubFolderPath = value;
            }
        }
    }

    private Boolean _IsTaskRunning= false;
    private Boolean IsTaskRunning
    {
        get
        {
            return _IsTaskRunning;
        }
        set
        {
            _IsTaskRunning = value;
            StateHasChanged();
        }
    }

    public string ProcessingServerBaseUrl
    {
        get
        {
            if (false)
            {
                return "https://localhost:44320";
            }
            else
            {
                return "http://be015:81";
            }

        }
    }

    private List<LogFields> Logs = new List<LogFields>();

    private void addAuthHeader(HttpClient client)
    {
        string creds = $"{_username}:{_password}";
        AuthenticationHeaderValue authHeaderValue = new AuthenticationHeaderValue("basic", creds);
        client.DefaultRequestHeaders.Authorization = authHeaderValue;
    }

    private JobDetails GetJobResult(string? jobId)
    {
        // get result of the job started by the request
        dynamic jobDetailsRequestResult = SendRequest("JobResults", $"{jobId}");
        //
        var jobDetailsContent = jobDetailsRequestResult.Content.ReadAsStringAsync().Result;
        //
        JobDetails jobDetails = JsonConvert.DeserializeObject<JobDetails>(jobDetailsContent);
        return jobDetails;
    }

    private Boolean IsJobComplete(JobDetails? jobDetails)
    {
        string jobState = jobDetails != null ? jobDetails.JobState : "ERROR";

        // check job state
        switch (jobState.ToLower())
        {
            case @"processing":
            case @"started":
            case @"enqueued":
                return false;

            default:
                return true;
        }
    }

    private void LogJobResult(string? jobId)
    {
        var jobDetails = GetJobResult(jobId);
        //
        string jobState = jobDetails != null ? jobDetails.JobState : "ERROR";

        //
        IsTaskRunning = !IsJobComplete(jobDetails);

        // check job state
        switch (IsJobComplete(jobDetails))
        {
            case false:
                var logItem = new LogFields(
                    DateTime.Now.ToString(CultureInfo.InvariantCulture),
                    "",
                    jobDetails?.JobName,
                    jobState,
                    "",
                    ""
                    );

                Log(logItem);

                // schedule new check in N ms
                var timer = new System.Threading.Timer(_ => { InvokeAsync(async () => { LogJobResult(jobId); }); }, null, 1000, 0);

                return;

            case true:
                var jobDetailsOutcome = (OperationResult)Utils.DeserializeJson<OperationResult>(jobDetails?.JobResultDetails);

                if (jobDetailsOutcome.Success != 1)
                {
                    jobState = "ERROR";
                }

                var logItem2 = new LogFields(
                    DateTime.Now.ToString(CultureInfo.InvariantCulture),
                    "",
                    jobDetails?.JobName,
                    jobState,
                    "",
                    jobDetailsOutcome.ToString()
                    );

                Log(logItem2);
                //
                return;
        }
    }

    public object SendRequest(string path, string arg, MultipartFormDataContent? objContent = null)
    {
        try
        {
            StateHasChanged();

            HttpClient client = new HttpClient { BaseAddress = new Uri($"{ProcessingServerBaseUrl}"), Timeout = TimeSpan.FromSeconds(600) };

            // add auth header
            addAuthHeader(client);

            HttpResponseMessage result;

            //HTTP GET Async
            if (objContent == null)
            {
                string strUrl = $"/DataProcessing/{path}/{arg}/{ftpSubFolderPath}";
                result = client.GetAsync(strUrl).Result;
            }
            else
            {
                string strUrl = $"/DataProcessing/{path}/{ftpSubFolderPath}";
                result = client.PostAsync(strUrl, objContent).Result;
            }
            if (!result.IsSuccessStatusCode)
            {
                //log response status here..
                throw new Exception($"{result.ReasonPhrase} {result.RequestMessage}");
            }

            // parse job ID
            var content = result.Content.ReadAsStringAsync().Result;

            //
            if (path.ToLower() != "JobResults".ToLower())
            {
                JobDetails? taskJobDetails = JsonConvert.DeserializeObject<JobDetails>(content);

                string? jobId = taskJobDetails?.JobId;
                if (jobId == null)
                {
                    jobId = "";
                }
                //
                LogJobResult(jobId);

                return jobId;
            }
            return result;
        }
        catch (Exception ex)
        {
            var logItem2 = new LogFields(
                DateTime.Now.ToString(CultureInfo.InvariantCulture),
                "",
                arg,
                "ERROR",
                "",
                new OperationResult(0, "200", "ERROPR", "", ex.ToString()).ToString()
                );

            Log(logItem2);
            return "";
        }
    }

    void Clear()
    {
        Logs.Clear();
        ResultTextAreaValue = "";
        Grid.Reload();
        //
        //
        StateHasChanged();
        //
    }

    void Log(LogFields logItem)
    {
        string status = logItem.Status;

        if (!Utils.IsBlank(logItem.OutcomeDetails))
        {
            var details = (OperationResult)Utils.DeserializeJson<OperationResult>(logItem.OutcomeDetails);
            if (!Utils.IsBlank(details.Error) || details.Success != 1)
            {
                status = "ERROR";
                ResultTextAreaValue = details.Error + "\n\n\n\n------------------------------------\n\n\n\n" + details.Details;
            }
            else
            {
                ResultTextAreaValue = details.Details;
            }
        }

        //
        logItem.OutcomeDetails = status;

        Logs.Add(logItem);
        Grid.Reload();

        StateHasChanged();
    }


    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 15;
        int maxAllowedFiles = 1;

        foreach (IBrowserFile file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var path = Path.GetTempFileName();
                //var path = Path.Combine(Environment.ContentRootPath,
                //    Environment.EnvironmentName, "unsafe_uploads",
                //    trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                fs.Close();

                var logItem = new LogFields(
                    DateTime.Now.ToString(CultureInfo.InvariantCulture),
                    "",
                    "Upload File",
                    "Saved On Server",
                    file.Name,
                    new OperationResult(1, "200", "Saved On Server", $"Saved On Server as {file.Name}", "").ToString()
                    );

                Log(logItem);

                // upload
                byte[] data;
                await using FileStream fs2 = new FileStream(path, FileMode.Open);
                using var br = new BinaryReader(fs2);
                data = br.ReadBytes((int)file.OpenReadStream().Length);
                //
                ByteArrayContent bytes = new ByteArrayContent(data);
                MultipartFormDataContent multiContent = new MultipartFormDataContent();
                multiContent.Add(bytes, "file", file.Name);

                // send file for checking
                var jobId = (string)this.SendRequest("CheckFileAlegeus", "", multiContent);

                ////// code needed for php / api client to wait till job is complete and show results to user
                //// loop till job is complete
                //Boolean isProcessing = true;
                //while (isProcessing)
                //{
                //    JobDetails jobDetails = GetJobResult(jobId);
                //    if (IsJobComplete(jobDetails))
                //    {
                ////         display the result
                //        OperationResult? result =(OperationResult) Utils.DeserializeJson<OperationResult>(jobDetails.JobResultDetails);
                //        if (Utils.IsBlank(result?.Error) )
                //        {
                //            var logItem2 = new LogFields(
                //                DateTime.Now.ToString(CultureInfo.InvariantCulture),
                //                "",
                //                "Check File",
                //                "Succeeded",
                //                file.Name,

                //                new OperationResult(1, "200", "Success", "", result?.Result.ToString()).ToString()
                //                );

                //            this.Log(logItem2);
                //        }
                //        else
                //        {
                //            var logItem2 = new LogFields(
                //                DateTime.Now.ToString(CultureInfo.InvariantCulture),
                //                "",
                //                "Check File",
                //                "Fail",
                //                file.Name,

                //                new OperationResult(0, "400", "ERROR", "", result?.Error.ToString()).ToString()
                //                );

                //            this.Log(logItem2);
                //        }
                //         exit loop
                //        isProcessing = false;
                //    }
                //    else
                //    {
                //        Thread.Sleep(200);
                //    }
                //}
            }
            catch (Exception ex)
            {
                var logItem = new LogFields(
                    DateTime.Now.ToString(CultureInfo.InvariantCulture),
                    "",
                    "Upload File",
                    "Error",
                    file.Name,
                    new OperationResult(0, "400", "ERROR", "", ex.ToString()).ToString()
                    );

                Log(logItem);
            }
        }
    }

    void cmdCopyTestFiles()
    {
        IsTaskRunning = true;
        dynamic result = SendRequest("StartJob", "copytestfiles");
    }

    void cmdProcessIncomingFiles()
    {
        IsTaskRunning = true;
        dynamic result = SendRequest("StartJob", "processincomingfiles");
    }

    void cmdProcessAlegeusFiles()
    {
        IsTaskRunning = true;
        dynamic result = SendRequest("StartJob", "processalegeusfiles");
    }

    void cmdRetrieveFtpErrorLogs()
    {
        IsTaskRunning = true;
        dynamic result = SendRequest("StartJob", "retrieveftperrorlogs");
    }

    void cmdProcessParticipantEnrollmentfiles()
    {
        IsTaskRunning = true;
        dynamic result = SendRequest("StartJob", "processparticipantenrollmentfiles");
    }

    void cmdShowJobStatus()
    {
        jsRuntime.InvokeAsync<object>("open", $"{ProcessingServerBaseUrl}/hangfire/jobs/processing", "_blank");
    }


    // @code end
}