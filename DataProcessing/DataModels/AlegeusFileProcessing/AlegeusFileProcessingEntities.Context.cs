//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataProcessing.DataModels.AlegeusFileProcessing
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Alegeus_File_ProcessingEntities : DbContext
    {
        public Alegeus_File_ProcessingEntities()
            : base("name=Alegeus_File_ProcessingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<alegeus_file_staging> alegeus_file_staging { get; set; }
        public virtual DbSet<Automated_Header_list> Automated_Header_list { get; set; }
        public virtual DbSet<file_processing_log> file_processing_log { get; set; }
        public virtual DbSet<file_processing_tasks_log> file_processing_tasks_log { get; set; }
        public virtual DbSet<message_log> message_log { get; set; }
    
        public virtual int Alegeus_Header_n_success()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Alegeus_Header_n_success");
        }
    
        public virtual int build_auto_ftp_batfile()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("build_auto_ftp_batfile");
        }
    
        public virtual int insert_to_auto_ftp_list()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_to_auto_ftp_list");
        }
    
        public virtual ObjectResult<string> proc_alegeus_AlterHeaders2015()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_alegeus_AlterHeaders2015");
        }
    
        public virtual ObjectResult<string> proc_alegeus_AlterHeaders2019()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_alegeus_AlterHeaders2019");
        }
    
        public virtual ObjectResult<proc_alegeus_AlterHeadersNone_Result> proc_alegeus_AlterHeadersNone()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_alegeus_AlterHeadersNone_Result>("proc_alegeus_AlterHeadersNone");
        }
    
        public virtual ObjectResult<Nullable<int>> insert_file_processing_log(ObjectParameter fileLogId, string fileId, string folderName, string templateType, string iCType, string toFTP, string bencode, string originalFileName, string originalFullPath, string originalFileUploadedOn, string newFileName, string newFileFullPath, ObjectParameter fileLogTaskId, string processingTask, string processingTaskOutcome, string processingTaskOutcomeDetails)
        {
            var fileIdParameter = fileId != null ?
                new ObjectParameter("fileId", fileId) :
                new ObjectParameter("fileId", typeof(string));
    
            var folderNameParameter = folderName != null ?
                new ObjectParameter("folderName", folderName) :
                new ObjectParameter("folderName", typeof(string));
    
            var templateTypeParameter = templateType != null ?
                new ObjectParameter("templateType", templateType) :
                new ObjectParameter("templateType", typeof(string));
    
            var iCTypeParameter = iCType != null ?
                new ObjectParameter("ICType", iCType) :
                new ObjectParameter("ICType", typeof(string));
    
            var toFTPParameter = toFTP != null ?
                new ObjectParameter("toFTP", toFTP) :
                new ObjectParameter("toFTP", typeof(string));
    
            var bencodeParameter = bencode != null ?
                new ObjectParameter("bencode", bencode) :
                new ObjectParameter("bencode", typeof(string));
    
            var originalFileNameParameter = originalFileName != null ?
                new ObjectParameter("originalFileName", originalFileName) :
                new ObjectParameter("originalFileName", typeof(string));
    
            var originalFullPathParameter = originalFullPath != null ?
                new ObjectParameter("originalFullPath", originalFullPath) :
                new ObjectParameter("originalFullPath", typeof(string));
    
            var originalFileUploadedOnParameter = originalFileUploadedOn != null ?
                new ObjectParameter("originalFileUploadedOn", originalFileUploadedOn) :
                new ObjectParameter("originalFileUploadedOn", typeof(string));
    
            var newFileNameParameter = newFileName != null ?
                new ObjectParameter("newFileName", newFileName) :
                new ObjectParameter("newFileName", typeof(string));
    
            var newFileFullPathParameter = newFileFullPath != null ?
                new ObjectParameter("newFileFullPath", newFileFullPath) :
                new ObjectParameter("newFileFullPath", typeof(string));
    
            var processingTaskParameter = processingTask != null ?
                new ObjectParameter("processingTask", processingTask) :
                new ObjectParameter("processingTask", typeof(string));
    
            var processingTaskOutcomeParameter = processingTaskOutcome != null ?
                new ObjectParameter("processingTaskOutcome", processingTaskOutcome) :
                new ObjectParameter("processingTaskOutcome", typeof(string));
    
            var processingTaskOutcomeDetailsParameter = processingTaskOutcomeDetails != null ?
                new ObjectParameter("processingTaskOutcomeDetails", processingTaskOutcomeDetails) :
                new ObjectParameter("processingTaskOutcomeDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("insert_file_processing_log", fileLogId, fileIdParameter, folderNameParameter, templateTypeParameter, iCTypeParameter, toFTPParameter, bencodeParameter, originalFileNameParameter, originalFullPathParameter, originalFileUploadedOnParameter, newFileNameParameter, newFileFullPathParameter, fileLogTaskId, processingTaskParameter, processingTaskOutcomeParameter, processingTaskOutcomeDetailsParameter);
        }
    }
}
