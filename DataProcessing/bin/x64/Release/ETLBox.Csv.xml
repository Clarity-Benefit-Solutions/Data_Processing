<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ETLBox.Csv</name>
    </assembly>
    <members>
        <member name="T:ETLBox.DataFlow.Connectors.CsvDestination`1">
            <summary>
            A Csv destination defines a csv file where data from the flow is inserted.
            </summary>
            <see cref="T:ETLBox.DataFlow.Connectors.DbDestination"/>
            <typeparam name="TInput">Type of ingoing data</typeparam>
            <example>
            <code>
            CsvDestination&lt;MyRow&gt; dest = new CsvDestination&lt;MyRow&gt;("/path/to/file.csv");
            dest.Wait(); //Wait for all data to arrive
            </code>
            </example>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvDestination`1.TaskName">
            <inheritdoc/>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvDestination`1.Configuration">
            <summary>
            The CsvHelper Configuration.
            E.g. you can change the delimiter or the escape character here.
            </summary>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvDestination`1.CsvContext">
            <summary>
            Gives you access to the CsvHelper CsvContext.
            You can modify the context before data is written.
            </summary>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvDestination`1.HttpContentType">
            <inheritdoc/>
        </member>
        <member name="M:ETLBox.DataFlow.Connectors.CsvDestination`1.#ctor(System.String)">
            <param name="uri">The destination csv file name or uri</param>
        </member>
        <member name="T:ETLBox.DataFlow.Connectors.CsvDestination">
            <inheritdoc/>
        </member>
        <member name="T:ETLBox.DataFlow.Connectors.CsvSource`1">
            <summary>
            Reads data from a csv source. While reading the data from the file, data is also asnychronously posted into the targets.
            Data is read a as string from the source and dynamically converted into the corresponding data format.
            </summary>
            <typeparam name="TOutput">Type of outgoing data</typeparam>
            <example>
            <code>
            CsvSource&lt;CSVData&gt; source = new CsvSource&lt;CSVData&gt;("Demo.csv");
            source.Configuration.Delimiter = ";";
            </code>
            </example>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvSource`1.TaskName">
            <inheritdoc/>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvSource`1.Configuration">
            <summary>
            The CsvHelper Configuration.
            E.g. you can change the delimiter or the escape character here.
            </summary>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvSource`1.CsvContext">
            <summary>
            Gives you access to the CsvHelper CsvContext.
            You can modify the context before data is read. 
            </summary>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvSource`1.FieldHeaders">
            <summary>
            The parsed header names from the csv
            </summary>
        </member>
        <member name="P:ETLBox.DataFlow.Connectors.CsvSource`1.IsHeaderRead">
            <summary>
            True if the header was already set
            </summary>
        </member>
        <member name="M:ETLBox.DataFlow.Connectors.CsvSource`1.#ctor(System.String)">
            <param name="uri">The source csv file name or uri</param>
        </member>
        <member name="M:ETLBox.DataFlow.Connectors.CsvSource`1.#ctor(System.String,ETLBox.DataFlow.ResourceType)">
            <param name="uri">The source csv file name or uri</param>
            <param name="resourceType">Specifies if data is loaded from a file, a web endpoint or other storage types (e.g. Azure Blob Storage)</param>
        </member>
        <member name="M:ETLBox.DataFlow.Connectors.CsvSource`1.ReadFieldHeaders(System.String)">
            <summary>
            Reads the header names using the current configuration.
            </summary>
            <param name="uri">Optionally you can override the current configured Uri</param>
            <returns>An array with the header names</returns>
        </member>
        <member name="T:ETLBox.DataFlow.Connectors.CsvSource">
            <inheritdoc/>
        </member>
        <member name="M:ETLBox.DataFlow.Connectors.CsvSource.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ETLBox.DataFlow.Connectors.CsvSource.#ctor(System.String,ETLBox.DataFlow.ResourceType)">
            <inheritdoc/>
        </member>
    </members>
</doc>
